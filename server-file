import time
import socket
import mysql.connector

#####################
try:
    database = mysql.connector.connect(user = 'zabbix', password = 'password', host = '127.0.0.1', database='zabbix')
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Pico-Script: Something is wrong with MySQL user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Pico-Script: Database does not exist")
    else:
        print(err)
    exit()
#####################

# Creating a socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print ("Socket successfully created")

# Get local Host machine name
host = socket.gethostname()
port = 10052

# Bind to port
s.bind((host, port))

# Queue up to 5 requests
s.listen(5)
print ("socket is listening")  

#Continues to run until interrupt or error.
while True:
    # establish connection
    clientSocket, addr = s.accept()
    print("got a connection from %s" % str(addr))

    #Send connection confirmation.
    currentTime = time.ctime(time.time()) + "\r\n"
    clientSocket.send(currentTime.encode('ascii'))

    #Recieve 
    response = clientSocket.recv(1024)
    host = 'pico' #Parse the hostname from response
    key = 'water_key' #Parse the key from response

    cursor = database.cursor()

    #Query SQL database for the water value of Pico AND its HVAC override permissions
    #hostid is findable w/ SELECT hostid FROM hosts WHERE host = /host/
    #confirm that hostid uses this water_key: SELECT hostid FROM items WHERE key_ = 'water_key';
    #most recent value from trapper = SELECT value FROM history_uint WHERE itemid = '12345' order by clock desc limit 1;
    
    #Request most recently trapped value for corresponding host and key.
    query = ("SELECT value FROM history_uint WHERE itemid = (SELECT itemid FROM items WHERE hostid = (SELECT hostid FROM hosts WHERE host = %s ) AND key_ = %s) order by clock desc limit 1;")
    cursor.execute(query, (host, key))

    #Search was Limit 1, so... I'm assuming the results are stored in a list.
    print(cursor[0])

    cursor.close()

    #Send whatever information back
    currentTime = time.ctime(time.time()) + "\r\n"
    clientSocket.send(currentTime.encode('ascii'))    
    
    clientSocket.close()

#Unreachable reminder
database.close()
